#!/bin/bash
## Opinionated Arch installation:
## Assumes UEFI, Latvia, Intel
## Creates:
## * sway desktop
## * swapfile 16G
## * fish shell
## * $HOME/tmp another RAM folder
##
## HOWTO:~# curl bit.ly/arhc.sh -o a && bash $_
## HOWNOTTO:~# bash <(curl bit.ly/arhc.sh)
##
## _PACSTRAP_ section {{{1
# Welcome {{{2
if (( $(ping -c1 -W1 archlinux.org | wc -l) < 1 )) ; then
    echo
    echo "$(tput bold)HAVE A CONNECTION! Bye!$(tput sgr0)"
    exit 1
else
    echo
    echo "$(tput bold)WELCOME!$(tput sgr0)"
    echo
fi
set +e

# Form {{{2
# @dot TODO: set -e and test this ... ansible?
# @dot TODO: prompts for swapspace size, wifi or wire setup.
lsblk -Sp
read -r -p '>> Enter drive: (default: /dev/sda):' DRIVE
DRIVE=${DRIVE:-/dev/sda}
PARTBOOT=$DRIVE\1
PARTROOT=$DRIVE\2
read -r -p ">> (1/6) Enter username: " USERNAME
read -r -p ">> (2/6) Enter hostname: " HOSTNAME
echo "$(tput bold)Caution! Following prompts has no confirmation and no echo.$(tput sgr0)"
read -s -r -p ">> (3/6) Enter 'root' password: " ROOTPW;echo
read -s -r -p ">> (4/6) Enter '$USERNAME' password: " USERPW;echo
read -s -r -p ">> (5/6) Enter disk encryption passphrase: " CRYPTPW;echo
read -s -r -p ">> (6/6) Enter passphrase for ~/.ssh/id_rsa: " SSHPW;echo
echo
echo "$(tput bold)THATS IT! come back in approx 15 minutes$(tput sgr0)"
echo

# Rank mirrors if needed {{{2
pacman -Sy --noconfirm archlinux-keyring
(( $(cat /etc/pacman.d/mirrorlist | wc -l) > 10 )) && (
echo ">> Ranking top 5 fastest mirrors..." 
which rankmirrors &>/dev/null || pacman -Sy --noconfirm --needed pacman-contrib &>/dev/null
curl -s "https://www.archlinux.org/mirrorlist/?protocol=https&use_mirror_status=on&country=LV&country=GB&country=DE" \
    | sed 's/^#//' | sed '/^#/d' \
    | rankmirrors -n 35 - > /etc/pacman.d/mirrorlist
)

# Make partitions {{{2
umount -R /mnt 2> /dev/null # just in case
sgdisk --zap-all $DRIVE
sgdisk --clear \
       --new=1:0:+550MiB --typecode=1:ef00 --change-name=1:EFI \
       --new=2:0:0       --typecode=2:8300 --change-name=2:cryptroot \
       $DRIVE

# Make filesystem and crypt {{{2
mkfs.vfat $PARTBOOT
echo -n $CRYPTPW | cryptsetup -q luksFormat $PARTROOT
echo -n $CRYPTPW | cryptsetup open $PARTROOT cryptroot
# NOTE: f2fs bechmarks very well on SSD
# NOTE: before using f2fs do this: pacman f2fs-tools btrfs-progs
mkfs.ext4 /dev/mapper/cryptroot

# Mount {{{2
mount /dev/mapper/cryptroot /mnt
mkdir /mnt/boot
mount $PARTBOOT /mnt/boot

# Pacstrap {{{2
pacstrap /mnt base linux linux-firmware base-devel xorg-server-xwayland sway fish termite \
  ttf-font-awesome waybar rofi \
  htop tree \
acl \
amd-ucode \
arch-install-scripts \
archlinux-keyring \
argon2 \
attr \
audit \
b43-fwcutter \
bash \
bc \
bind-tools \
broadcom-wl \
btrfs-progs \
bzip2 \
ca-certificates-mozilla \
ca-certificates-utils \
clonezilla \
coreutils \
cracklib \
crda \
cryptsetup \
curl \
darkhttpd \
db \
dbus \
ddrescue \
device-mapper \
dhclient \
dhcpcd \
dialog \
diffutils \
ding-libs \
dmraid \
dnsmasq \
dnssec-anchors \
dosfstools \
drbl \
e2fsprogs \
ecryptfs-utils \
efibootmgr \
efitools \
efivar \
elinks \
ethtool \
exfat-utils \
expat \
f2fs-tools \
file \
filesystem \
findutils \
fsarchiver \
fuse-common \
fuse2 \
fuse3 \
gawk \
gc \
gcc-libs \
gdbm \
geoip \
geoip-database \
gettext \
glib2 \
glibc \
gmp \
gnupg \
gnutls \
gpgme \
gpm \
gptfdisk \
grep \
grml-zsh-config \
groff \
grub \
gssproxy \
gzip \
haveged \
hdparm \
hicolor-icon-theme \
hwids \
iana-etc \
icu \
inetutils \
intel-ucode \
iproute2 \
iptables \
iputils \
ipw2100-fw \
ipw2200-fw \
irssi \
iw \
iwd \
jfsutils \
json-c \
kbd \
keyutils \
kmod \
krb5 \
lbzip2 \
ldns \
less \
lftp \
libaio \
libarchive \
libassuan \
libatomic_ops \
libcap \
libcap-ng \
libcroco \
libedit \
libelf \
libevent \
libffi \
libgcrypt \
libgpg-error \
libidn \
libidn2 \
libjpeg-turbo \
libksba \
libldap \
libmnl \
libnetfilter_conntrack \
libnewt \
libnfnetlink \
libnftnl \
libnghttp2 \
libnl \
libnsl \
libotr \
libpcap \
libpipeline \
libproxy \
libpsl \
libsasl \
libseccomp \
libsecret \
libssh2 \
libtasn1 \
libtirpc \
libunistring \
libusb \
libutil-linux \
libxml2 \
licenses \
linux \
linux-api-headers \
linux-atm \
linux-firmware \
lmdb \
logrotate \
lrzip \
lsscsi \
lua \
lua51 \
lvm2 \
lz4 \
lzo \
lzop \
man-db \
man-pages \
mc \
mdadm \
memtest86+ \
mkinitcpio \
mkinitcpio-busybox \
mkinitcpio-nfs-utils \
mpfr \
mtools \
nano \
nbd \
ncurses \
ndisc6 \
net-tools \
netctl \
nettle \
nfs-utils \
nfsidmap \
nilfs-utils \
nmap \
npth \
nspr \
nss \
ntfs-3g \
ntp \
openconnect \
openresolv \
openssh \
openssl \
openssl-1.0 \
openvpn \
p11-kit \
pacman \
pacman-mirrorlist \
pam \
pambase \
partclone \
parted \
partimage \
pbzip2 \
pciutils \
pcre \
pcre2 \
pcsclite \
perl \
pigz \
pinentry \
pixz \
pkcs11-helper \
popt \
ppp \
pptpclient \
procps-ng \
progsreiserfs \
psmisc \
python \
readline \
refind-efi \
reiserfsprogs \
rp-pppoe \
rpcbind \
rsync \
s-nail \
screen \
sdparm \
sed \
sg3_utils \
shadow \
slang \
smartmontools \
sqlite \
sshfs \
stoken \
sudo \
sysfsutils \
syslinux \
systemd \
systemd-libs \
systemd-sysvcompat \
tar \
tcl \
tcpdump \
testdisk \
texinfo \
thin-provisioning-tools \
tre \
tzdata \
usb_modeswitch \
usbutils \
util-linux \
vi \
vim \
vim-runtime \
vpnc \
wget \
which \
wireless-regdb \
wireless_tools \
wpa_supplicant \
wvdial \
wvstreams \
xfsprogs \
xl2tpd \
xplc \
xz \
zlib \
zsh \
zstd \
  mpv mpd youtube-dl \
  neovim wl-clipboard nodejs npm the_silver_searcher fzf \
  alsa-utils pulseaudio pavucontrol pulsemixer \
  chromium docker openssh git rsync wpa_supplicant dialog \
  archlinux-keyring libnotify hub cronie brightnessctl \
  transmission-gtk dunst mako openbsd-netcat swaylock grim entr \
  ctags

# Fstab {{{2
genfstab -U -p /mnt > /mnt/etc/fstab

# ArchRoot {{{2
unset -v A
sed "/_PAC${A}STRAP_/,/_CH${A}ROOT_/d" $0 > /mnt/etc/in-arch-chroot.sh
sed -i "s#PARTBOOT_#PARTBOOT=\"$PARTBOOT\"#" /mnt/etc/in-arch-chroot.sh
sed -i "s#PARTROOT_#PARTROOT=\"$PARTROOT\"#" /mnt/etc/in-arch-chroot.sh
sed -i "s#HOSTNAME_#HOSTNAME=\"$HOSTNAME\"#" /mnt/etc/in-arch-chroot.sh
sed -i "s#USERNAME_#USERNAME=\"$USERNAME\"#" /mnt/etc/in-arch-chroot.sh
sed -i "s#USERPW_#USERPW=\"$USERPW\"#" /mnt/etc/in-arch-chroot.sh
sed -i "s#ROOTPW_#ROOTPW=\"$ROOTPW\"#" /mnt/etc/in-arch-chroot.sh
sed -i "s#CRYPTPW_#CRYPTPW=\"$CRYPTPW\"#" /mnt/etc/in-arch-chroot.sh
sed -i "s#SSHPW_#SSHPASS=\"$SSHPASS\"#" /mnt/etc/in-arch-chroot.sh

chmod +x /mnt/etc/in-arch-chroot.sh
# @dot TODO: pacman conf set Color VerbosePkgLists CheckSpace ILoveCandy
cat /etc/pacman.d/mirrorlist > /mnt/etc/pacman.d/mirrorlist
arch-chroot /mnt /bin/bash -c "su - -c /etc/in-arch-chroot.sh"
# now in skript 2 ...
umount -R /mnt
echo ">> unmounted /mnt"
echo ">> you can reboot or poweroff"
exit
## _CHROOT_ section {{{1 
# Placeholders to be replaced {{{2
PARTBOOT_
PARTROOT_
HOSTNAME_
USERNAME_
ROOTPW_
USERPW_
CRYPTPW_
SSHPW_

# Locale, Timezones {{{2
echo en_US.UTF-8 UTF-8 > /etc/locale.gen
echo lv_LV.UTF-8 UTF-8 >> /etc/locale.gen

echo LANG=en_US.UTF-8              >  /etc/locale.conf
echo LANGUAGE=en_US.UTF-8          >> /etc/locale.conf
echo LC_ADDRESS=en_US.UTF-8        >> /etc/locale.conf
echo LC_COLLATE=en_US.UTF-8        >> /etc/locale.conf
echo LC_CTYPE=en_US.UTF-8          >> /etc/locale.conf
echo LC_IDENTIFICATION=en_US.UTF-8 >> /etc/locale.conf
echo LC_MEASUREMENT=en_US.UTF-8    >> /etc/locale.conf
echo LC_MESSAGES=en_US.UTF-8       >> /etc/locale.conf
echo LC_MONETARY=en_US.UTF-8       >> /etc/locale.conf
echo LC_NAME=en_US.UTF-8           >> /etc/locale.conf
echo LC_NUMERIC=en_US.UTF-8        >> /etc/locale.conf
echo LC_PAPER=en_US.UTF-8          >> /etc/locale.conf
echo LC_TELEPHONE=en_US.UTF-8      >> /etc/locale.conf
echo LC_TIME=lv_LV.UTF-8           >> /etc/locale.conf

export LANG=en_US.UTF-8

locale-gen
ln -sf /usr/share/zoneinfo/Europe/Riga /etc/localtime
hwclock --systohc --utc
timedatectl set-ntp 1

# Networking {{{2
echo $HOSTNAME > /etc/hostname
echo "127.0.0.1	localhost.localdomain localhost $HOSTNAME" > /etc/hosts
echo "::1	localhost.localdomain localhost $HOSTNAME" >> /etc/hosts
systemctl enable dhcpcd.service
systemctl enable netctl-auto@$(ip link | cut -d: -f2 | grep wl | sed 's/ //').service
pacman -S --noconfirm wpa_supplicant wpa_actiond dialog

# Users {{{2
echo "root:$ROOTPW" | chpasswd
groupadd sudo
useradd -m -g users -G sudo,docker -s /usr/bin/fish $USERNAME
echo "$USERNAME:$USERPW" | chpasswd
echo "%sudo ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
systemctl enable docker
systemctl enable cronie

# Ramfolder, swapspace {{{2
mkdir -p /home/$USERNAME/tmp
chown -R $USERNAME:users $_
echo "tmpfs /home/$USERNAME/tmp tmpfs mode=0777,noatime 0 0" >> /etc/fstab
fallocate -l 16G /swapfile
chmod 600 /swapfile
mkswap /swapfile
swapon /swapfile
echo "/swapfile none swap defaults 0 0" >> /etc/fstab

# bootloader {{{2
bootctl --path=/boot install
printf "timeout 4
default arch" \
> /boot/loader/loader.conf
CRYPTUUID="$(blkid -o value -s UUID $PARTROOT)"
pacman -Sy --noconfirm intel-ucode
printf \
"title Archlinux
linux /vmlinuz-linux
initrd /intel-ucode.img
initrd /initramfs-linux.img
options cryptdevice=UUID=$CRYPTUUID:cryptroot root=/dev/mapper/cryptroot rw" \
> /boot/loader/entries/arch.conf
# add encrypt to bootctl
printf \
"MODULES=()
BINARIES=()
FILES=()
HOOKS=(base udev autodetect modconf block encrypt filesystems keyboard fsck)" \
> /etc/mkinitcpio.conf
mkinitcpio -p linux # here if fs2fs is used is checked or errors

# ssh, gpg {{{2
ssh-keygen -N $SSHPW -f ~/.ssh/id_rsa

# Dotfiles topping {{{2
git clone --depth 1 https://github.com/talbergs/- /tmp/life
chown -R $USERNAME:users /tmp/life
rsync -av $_/ /home/$USERNAME/
rm -rf $_/.git
rm /etc/in-arch-chroot.sh
curl https://sh.rustup.rs -sSf | sh -s -- -y --no-modify-path --default-toolchain stable
npm i intelephence -g

git config --global user.email "you@example.com"
git config --global user.name "Your Name"

echo "PARTBOOT: $PARTBOOT"
echo "PARTROOT: $PARTROOT"
echo "HOSTNAME: $HOSTNAME"
echo "USERNAME: $USERNAME"
echo "ROOTPW: $ROOTPW"
echo "USERPW: $USERPW"
echo "CRYPTPW: $CRYPTPW"
# vim: fdm=marker
